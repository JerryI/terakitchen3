
<div class="d-flex align-items-center">
    <div class="col-lg-10 col-md-8 mx-left">
      <a class="btn-outline-id" href="item/index.wsp?id=<?wsp id ?>"><?wsp id ?></a>
      <h1 id="check-text" class="fw-light">Material parameters</h1>
      <p  class="lead text-muted">Check the error map</p>
      
          <div id="spectrum"></div>

          
    
          <div id="map"></div>

          <form action="wpost.wsp" method="post" id="dialog">
            <input type="hidden" name="id" value="<?wsp $uid ?>">


            <p id="textField" class="lead text-muted">Range settings</p>

            
        </form>      

        <input type="submit" name="action" class="btn btn-secondary my-2" value="Cancel" form="dialog" >
        <input type="submit" name="action" class="btn btn-primary my-2" value="Ok" form="dialog" >
  
        <p class="lead text-muted">Control panel</p>
              
    </div>
  </div>


  <script>
    

    {   
        let vfreqs = <?wsp ExportString[freqs, "JSON"] ?>;

        let mat = [
            {
                x: vfreqs, 
                y: <?wsp ExportString[rkappa, "JSON"] ?>, 
                type: 'line',
                name: 'k (raw)'
            },

            {
                x: vfreqs, 
                y: <?wsp ExportString[kappa, "JSON"] ?>, 
                type: 'line',
                name: 'k'
            },
            
            {
                x: vfreqs, 
                y: <?wsp ExportString[n, "JSON"] ?>, 
                type: 'line',
                yaxis: 'y2',
                name: 'n'
            }            
        ];

        let mlayout = {
            xaxis: {
                title: 'wavenumber, cm<sup>-1</sup>',
                showgrid: true,
                zeroline: true
            },
            yaxis: {
                title: 'Im',
                showgrid: true,
                zeroline: true,
            },
            yaxis2: {
                title: 'Re',
                titlefont: {color: 'rgb(148, 103, 189)'},

                tickfont: {color: 'rgb(148, 103, 189)'},

                overlaying: 'y',
                side: 'right'

            }            
        };        

        let data = {
            z: <?wsp ExportString[map[[3]], "JSON"] ?>, 
            x: <?wsp ExportString[map[[1]], "JSON"] ?>, 
            y: <?wsp ExportString[map[[2]], "JSON"] ?>, 
            type: 'contour'
        };       
        

        let layout = {  hovermode:'closest',
                        title: 'error',
                        xaxis: {title: 'thickness (mm)'},
                        yaxis: {title: 'scale'}
        };

        Plotly.newPlot('map', [data], layout);
        Plotly.newPlot('spectrum', mat, mlayout);
        document.getElementById('map').on('plotly_click', function(ev) {
            let q = `
                  PageEmitt["<?wsp $uid ?>"][{"getGraph at", ${ev.points[0].pointIndex}}]
                `;
            socket.send(q);

            const textfeild = document.getElementById('check-text');
            textfeild.insertAdjacentHTML('afterend','<div id="loading" class="spinner-border text-danger" style="float:right" role="status"><span class="sr-only">Loading...</span></div>');
        });

        core.ShowTHzGraph = function(args, env) {
            let n = interpretate(args[0]);
            let k = interpretate(args[1]);
            
            Plotly.deleteTraces('spectrum', [-1,-2]);
            Plotly.addTraces('spectrum', [{x: vfreqs, y: k, name: 'k', line: { opacity: 0.5 }}, {x: vfreqs, y: n, name: 'n', yaxis:'y2' }]);

            document.getElementById('loading').remove();
        }
    }
  </script>

  <?wsp LoadPage["services/nk3-gpu/views/post.wsp"] ?>