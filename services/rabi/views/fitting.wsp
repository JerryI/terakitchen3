<div class="d-flex align-items-center">
    <div class="col-lg-10 col-md-8 mx-left">
      <a class="btn-outline-id" href="item/index.wsp?id=<?wsp samid ?>"><?wsp samid ?></a>
      <h1 class="fw-light">Semi-classical fitting of</h1>
          

          <div class="col-xs-6">
            <div id="tds"></div>
            <div id="fft"></div>
            <?wsp If[plotAlpha,  ?>
              <div id="alpha"></div>
            <?wsp , "" ]?>
          </div>
          
        
          <form action="wpost.wsp" method="post" id="dialog">
            <input type="hidden" name="id" value="<?wsp $uid ?>">                               
          </form>  
          
          

          <div class="form-group">
  
                <label class="form-group-label" for="epsinf">
                   epsilon infinite
                </label>

                <input id="epsinf" type="text" class="form-control form-control" value="<?wsp \[Epsilon]\[Infinity] ?>" name="epsinf">
            
          </div>

          <div class="form-group">
  
            <label class="form-group-label" for="omegap">
               plasma frequency
            </label>

            <input id="omegap" type="text" class="form-control form-control" value="<?wsp \[Omega]p ?>" name="omegap">
        
          </div> 

          <div class="form-group">
  
            <label class="form-group-label" for="omega0">
               central frequency
            </label>

            <input id="omega0" type="text" class="form-control form-control" value="<?wsp \[Omega]0 ?>" name="omega0">
        
          </div>          

          <div class="form-group">
  
            <label class="form-group-label" for="gamma">
               damphing (gamma)
            </label>

            <input id="gamma" type="text" class="form-control form-control" value="<?wsp \[Gamma] ?>" name="gamma">
        
          </div> 

          <div class="form-group">
  
                <label class="form-group-label" for="tdsscale">
                   tds scale
                </label>

                <input id="tdsscale" type="text" class="form-control form-control" value="<?wsp tdsscale ?>" name="tdsscale">
            
          </div>

          <div class="form-group">
  
                <label class="form-group-label" for="thickness">
                  thickness
                </label>

                <input id="thickness" type="text" class="form-control form-control" value="<?wsp thickness ?>" name="thickness">
            
          </div>          

          

          <div class="form-group">
            <small>Include FP reflections</small><br>
          
            <input id="fpmodel" name="fpmodel" type="checkbox" form="dialog" checked>
          </div> 
          
          

          <button id="more"  class="btn btn-secondary" onclick="more()">Autofit</button>
          
          <button id="correct" class="btn btn-secondary" onclick="correct()">Autocorrect</button>
          <button id="update" class="btn btn-secondary" onclick="update()">Update</button>


          <input id="ok" type="submit" name="action" class="btn btn-primary my-2" value="Ok" form="dialog">
          <input type="submit" name="action" class="btn btn-secondary my-2" value="Cancel" form="dialog" >
          <p id="textField" class="lead text-muted"></p>
            
              
    </div>
  </div>
 
  <script>
{
    function correct() {
      var q = `PageEmitt["<?wsp $uid ?>"][{"correct"}];`;   

      socket.send(q);      
    }

    function update() {
        var fp = document.getElementById("fpmodel").checked;
        if (fp) {fp="True";} else {fp="False";}

        var q = `PageEmitt["<?wsp $uid ?>"][{"update", ${document.getElementById("epsinf").value}, ${document.getElementById("omegap").value}, ${document.getElementById("omega0").value}, ${document.getElementById("gamma").value}, ${fp}, ${document.getElementById("tdsscale").value}, "${document.getElementById("thickness").value}"}];`;   

        socket.send(q);

        document.getElementById('logoFlames').style = "display: block";
        document.getElementById('bigFlames').style = "opacity: 0.2"; 
    }

    let tds = document.getElementById('tds');
    let fft = document.getElementById('fft');


    let color1      = '#7b3294';

    let color1Light = '#c2a5cf';
    let colorX      = '#ffa7b5';
    let colorY      = '#fdae61';

    let data = 
            {
                x: <?wsp ExportString[sam["tds"][[All,1]], "JSON"]   ?>,
                y: <?wsp ExportString[sam["tds"][[All,2]], "JSON"]   ?>,
                mode: 'lines',
                name: 'exp'
            };

    let data2 = 
        {
                x: [0],
                y: [0],
                mode: 'lines'
    };  
    
    let freqs = <?wsp ExportString[dfreq//DropHalf, "JSON"]   ?>;

    let data3 = 
        {
                y: <?wsp ExportString[dfft//DropHalf, "JSON"]   ?>,
                x: freqs,
                mode: 'lines',
                name: 'exp'
    };
    
    let data4 = 
        {
                x: [0],
                y: [0],
                mode: 'lines'
    };    
        
    let layout = {
        xaxis: {
            title: 't, ps',
            showgrid: true,
            zeroline: true
        },
        yaxis: {
            title: 'I, nA',
            showgrid: true,
            zeroline: true
        }
    };

    let layout2 = {
        xaxis: {
            title: 'wavenumber, cm-1',
            showgrid: true,
            zeroline: true
        },
        yaxis: {
            title: 'Power, a.u.',
            showgrid: true,
            zeroline: true
        }
    };    
        
    Plotly.plot(tds, [data, data2], layout);

    Plotly.plot(fft, [data3, data4], layout2);


    
    <?wsp If[plotAlpha,  ?>
    let alphaExp = 
        {
                y: <?wsp ExportString[sam["alpha"][[All,2]]//DropHalf, "JSON"]   ?>,
                x: freqs,
                mode: 'lines',
                name: 'exp'
    };

    let nExp = 
        {
                y: <?wsp ExportString[sam["n"][[All,2]]//DropHalf, "JSON"]   ?>,
                x: freqs,
                mode: 'lines',
                name: 'exp',
                yaxis: 'y2'
    };    
    
    let alphaSim = 
        {
                x: [0],
                y: [0],
                mode: 'lines'
    };
    let nSim = 
        {
                x: [0],
                y: [0],
                mode: 'lines',
                yaxis: 'y2'
    };    

    let layoutAlpha = {
            xaxis: {
                title: 'wavenumber, cm-1',
                showgrid: true,
                zeroline: true
            },
            yaxis: {
                title: 'absorption coefficient, cm-1',
                showgrid: true,
                zeroline: true,
            },
            yaxis2: {
                title: 'n',
                titlefont: {color: 'rgb(148, 103, 189)'},

                tickfont: {color: 'rgb(148, 103, 189)'},

                overlaying: 'y',
                side: 'right'

            }            
      };   
      
    Plotly.plot('alpha', [alphaExp, nExp, alphaSim, nSim], layoutAlpha);  

    <?wsp , ""] ?>

    core.UpdateAlphaGraph = function(args, env) {
        let a = JSON.parse(interpretate(args[1]));
        let i = JSON.parse(interpretate(args[0]));


        Plotly.deleteTraces('alpha', [2,3]);
        Plotly.addTraces('alpha', [{x:freqs, y: a, name: 'sim'}, {x:freqs, y: i, name: 'sim', yaxis: 'y2'}]);
        
    }    

    core.UpdateGraph = function(args, env) {
        let r = JSON.parse(interpretate(args[0]));

        let jr = JSON.parse(interpretate(args[1]));

        let ft = JSON.parse(interpretate(args[2]));

        Plotly.deleteTraces(tds, [1]);
        Plotly.addTraces(tds, [{x:r[0] , y: r[1], name: 'sim'}]);

        Plotly.deleteTraces(fft, [1]);
        Plotly.addTraces(fft, [{x:freqs, y: ft, name: 'sim'}]);        

        document.getElementById("epsinf").value = jr[0];
        document.getElementById("omegap").value = jr[1];
        document.getElementById("omega0").value = jr[2];
        document.getElementById("gamma").value  = jr[3];

        document.getElementById('logoFlames').style = "display: none";
        document.getElementById('bigFlames').style = "opacity: 0"; 


    }

    core.ItIsOK = function(args, env) {
        document.getElementById("ok").style = "";
        document.getElementById("more").style = "";
        document.getElementById("textField").innerHTML = "Done! Fitted parameters will be stored in the sample data.";
    
        
    };

    function more() {
        var q = 'PageEmitt["<?wsp $uid ?>"][{"more"}];';       
        socket.send(q);
    }

    document.getElementById('dialog').addEventListener('submit', e => {

// Store reference to form to make later code easier to read
const form = e.target;

// Post data using the Fetch API
fetch(form.getAttribute("action"), {
  method: form.method,
  body: new FormData(form)
})

// Prevent the default form submit
e.preventDefault();
}); 

}
  </script>