

<div class="d-flex align-items-center">
    <div class="col-lg-10 col-md-8 mx-left">
        <a class="btn-outline-id" href="item/index.wsp?id=<?wsp samid ?>"><?wsp samid ?></a>
      <h1 class="fw-light">Entscheidung erforderlich</h1>
  
          <p class="lead text-muted">Please select the regions, where the absorptions are presented</p>
    
          <div id="plot"></div>

          <p class="lead text-muted">The live preview of the calculated background</p>

          <div id="back"></div>

          <?wsp If[tdswrite, ?>
            <p class="lead text-muted">The live preview of the filtered signal</p>
            <div id="tds"></div>
          <?wsp , ""] ?>

          <form action="wpost.wsp" method="post" id="dialog2">
            <input type="hidden" name="id" value="<?wsp $uid ?>">

            <input id="points" type="hidden" class="form-control form-control" value="[]" name="points">          

            <div class="form-group">
  
                <label class="form-group-label" for="cut">
                    cutoff frequency
                </label>
  
                
                <input id="cut" type="text" class="form-control form-control" value="<?wsp cutoff ?>" name="cut">
            </div>            
            <small>for the low-pass filter</small><br><br>                       
            
        </form>      

        <button class="btn btn-secondary" onclick="check()">Update preview</button>

        <input type="submit" name="action" class="btn btn-secondary my-2" value="Cancel" form="dialog2" >
        <input type="submit" name="action" class="btn btn-primary my-2" value="Ok" form="dialog2" >
  
     
          <p class="lead text-muted">By clicking submit you will apply it only for this sample</p>
              
    </div>
  </div>


  <script>
    {
    let graphDiv = document.getElementById('plot');



    let color1 = '#7b3294';

    let color1Light = '#c2a5cf';
    let colorX = '#ffa7b5';
    let colorY = '#fdae61';

    let freqs = <?wsp ExportString[freqs, "JSON"]   ?>;

    <?wsp If[tdswrite, ?>
        let time = <?wsp ExportString[Drop[ref["tds"][[All,1]], -1], "JSON"]   ?>;
        

        let datatds1 = {
            x: time,
            y: <?wsp ExportString[Drop[sam["tds"][[All,2]], -1], "JSON"]?>,
            mode: 'lines',
            name: 'tds'
    };

    let datatds2 = {
        x: time,
            y: <?wsp ExportString[Drop[sam["tds"][[All,2]], -1], "JSON"]?>,
            mode: 'lines',
            name: 'filtered'
    }; 


        let layouttds = {
            xaxis: {
                title: 't, ns',
                showgrid: true,
                zeroline: true
            },
            yaxis: {
                title: 'I, nA',
                showgrid: true,
                zeroline: true,
            }          
        };


        Plotly.newPlot('tds', [datatds1, datatds2], layouttds);        

    <?wsp , "" ] ?>

    Plotly.plot(graphDiv, [{
        type: 'scatter',
        mode: 'markers',

        x: freqs,
        y: <?wsp ExportString[alpha, "JSON"]   ?>,

        xaxis: 'wavenumber, cm-1',
        yaxis: 'absorption coefficient, cm-1',
        zeroline: true,
        showgrid: true,
        marker: {color: color1, size: 3}
    }], {
  
        dragmode:'select',
        hovermode: false 
    });

 

    graphDiv.on('plotly_selected', function(eventData) {
    var x = [];
    var y = [];

    var colors = [];

    for(var i = 0; i < <?wsp alpha//Length ?>; i++) colors.push(color1Light);
        eventData.points.forEach(function(pt) {
            x.push(pt.x);
            y.push(pt.y);
            colors[pt.pointNumber] = color1;
        });

        Plotly.restyle(graphDiv, {
            x: [x, y],
            xbins: {}
        }, [1, 2]);

        console.log(x);
        document.getElementById('points').value = JSON.stringify(x);

        Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);
    });

    

    let data1 = {
            x: freqs,
            y: <?wsp ExportString[alpha,"JSON"] ?>,
            mode: 'lines',
            name: 'alpha'
    };

    let data2 = {
            x: <?wsp ExportString[freqs,"JSON"]   ?>,
            y: <?wsp ExportString[cutted,"JSON"] ?>,
            mode: 'lines',
            name: 'background'
    }; 


        let layout = {
            xaxis: {
                title: 'wavenumber, cm-1',
                showgrid: true,
                zeroline: true
            },
            yaxis: {
                title: 'absorption coefficient, cm-1',
                showgrid: true,
                zeroline: true,
            }          
        };


        Plotly.newPlot('back', [data1, data2], layout);


        core.UpdateGraph = function(args, env) {
            let r = JSON.parse(interpretate(args[0]));
        
            Plotly.deleteTraces('back', [-1]);
            Plotly.addTraces('back', [{x:freqs, y: r,  name: 'background'}]);              
                
            document.getElementById('logoFlames').style = "display: none";
            document.getElementById('bigFlames').style = "opacity: 0"; 
        };

        core.UpdateTDS = function(args, env) {
            let r = JSON.parse(interpretate(args[0]));
            console.log(r);
        
            Plotly.deleteTraces('tds', [-1]);
            Plotly.addTraces('tds', [{x:time, y: r,  name: 'filtered'}]);              

        };        

        function check() {
            var cut = document.getElementById('cut').value;
            var points = document.getElementById('points').value;
            

            var q = `
                    PageEmitt["<?wsp $uid ?>"][{${cut}, "${points}"}]
                    `;
            
        

            
            document.getElementById('logoFlames').style = "display: block";
            document.getElementById('bigFlames').style = "opacity: 0.2"; 
            socket.send(q);
            //
        } 

        document.getElementById('dialog2').addEventListener('submit', e => {

            // Store reference to form to make later code easier to read
            const form = e.target;

            // Post data using the Fetch API
            fetch(form.getAttribute("action"), {
              method: form.method,
              body: new FormData(form)
            })

            // Prevent the default form submit
            e.preventDefault();
        });        
}
  </script>