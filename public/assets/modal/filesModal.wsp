  <!-- Modal -->
<div class="modal fade" id="filesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"  aria-hidden="true" >
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Upload new data</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <!--<span aria-hidden="true">&times;</span>-->
          </button>
        </div>
        <div class="modal-body">
          <form action="experiment/fileuploader.wsp" method="post" enctype='multipart/form-data' id="filesform" >
            <div class="form-group">
              <label for="experiment">Choose the experiment</label>
              <select name="experiment" id="experiment" form="filesform" onchange="getExp(this)">
                
              <?wsp If[ !StringQ[selectedExperiment],  ?>

              <?wsp  With[{i = Last[experiments]["sample"]}, ?>
                <option value="<?wspi?>" selected="selected"><?wspi?></option>  
                <?wsp ] ?>

                <?wsp Table[ ?>
                  <option value="<?wspi?>"><?wspi?></option>    
                <?wsp , {i,Drop[experiments//Keys//Reverse,1]}]  ?>
                 
                <?wsp , ""] ?>


                <?wsp If[ StringQ[selectedExperiment],  ?>

                  <option value="<?wspselectedExperiment?>" selected="selected"><?wspselectedExperiment?></option>  
                  
                <?wsp , ""] ?>
         
              </select>
            </div>

            <div class="form-group">
              <label for="folder">Choose the folder</label>
              <select name="folder" id="folder" form="filesform">

              <option value="Workbook" selected="selected">Workbook</option>  
                
              <?wsp If[ StringQ[selectedExperiment],  ?>
                <?wsp Table[ ?>
                  <option value="<?wsp i[[1]] ?>"><?wsp i[[2]] ?></option>          
                <?wsp , {i, Function[x,{x,folders[x,"name"]}]/@(experiments[selectedExperiment, "folders"]//Keys)}] ?>
              <?wsp , ""] ?>

              <?wsp If[ !StringQ[selectedExperiment],  ?>
                <?wsp Table[ ?>
                  <option value="<?wsp i[[1]] ?>"><?wsp i[[2]] ?></option>          
                <?wsp , {i, Function[x,{x,folders[x,"name"]}]/@(experiments[Last[experiments]["sample"], "folders"]//Keys)}] ?>
              <?wsp , ""] ?>              


         
              </select>
            </div>            

            <br>
            <div class="form-group">
              <label>Attach files</label>
              <input type="file" name="files" multiple>
            </div>
            <br>
            <div class="form-group">
              <label for="experiment">Choose the routine</label>
              <select name="preset" id="presetlist" form="filesform" onchange="getPreset(this)">
                  <option value="expert" selected="selected">Expert</option>  
                  <?wsp Table[ ?>
                    <option value="<?wsp preset ?>"><?wsp preset ?></option> 
                  <?wsp , {preset, settings["presets"]//Keys}] ?>
              </select><br>
              <small>You can choose the default presets for the settings of the preprocessors.</small><br>
              <button type="button" class="btn btn-outline-secondary" onclick="removePreset()">Remove preset</button>
              <button type="button" onclick="modalLoad('savePreset')" class="btn btn-outline-info">Save as a preset</button>
              
            </div> 

            <div class="form-group" id="routine">
              <label>Choose the preprocessors to apply to the uploaded data</label>
              <?wsp 
                Table[

                With[{unit = Get["services/"<>i<>"/manifest"]},
                
                 ?>
              
              <div class="form-check form-switch">
                <input class="form-check-input" name = "$service_<?wspi?>_allowed" type="checkbox" id="$service_<?wspi?>">
                <label class="form-check-label" for="<?wspi?>">
                  <?wspi?>
                </label>
                <small><?wspunit["description"]?></small>
                <div class="form-group">
                  
                  <?wsp Table[ ?>
                  <label class="form-group-label" for="$service_<?wspi?>_<?wsp p[symbol//ToString] ?>">
                    <?wspp["desc"]?>
                  </label>
                  <input id="$service_<?wspi?>_<?wsp p[symbol//ToString] ?>" <?wsp <|"symbol"->StringTemplate["type=\"text\" value=\"``\""][p["value"]], "real"->StringTemplate["type=\"number\" step=any value=\"``\""][p["value"]], "integer"->StringTemplate["type=\"number\" step=1 value=\"``\""][p["value"]], "text"->"type=\"text\" value=\""<>p["value"]<>"\"", "bool"->"class=\"form-check\" type=\"checkbox\" "<>If[p["value"], "checked", ""]|>@p["type"] ?> class="form-control form-control" name="$service_<?wspi?>_<?wsp p[symbol//ToString] ?>">

                  <?wsp , {p, unit["parameters"]}] ?>
                </div>
              
              </div>

              <?wsp ] , {i, FileNameTake /@ FileNames[All, "services"]}] ?>              
            </div>


            <div class="form-group"> 
              <label class="form-group-label" for="customtag">
                Add the custom tag(s) to all files
              </label>
              <textarea id="customtag"  class="form-control form-control-lg" name="customtag"> "cut"->"ab"</textarea>
            </div>  
            <div class="form-group"> 
              <label class="form-group-label" for="thickness">
                Thickness
              </label>
              <input id="thickness" type="text" class="form-control form-control-lg" placeholder="XX cm" name="thickness">
              <small>Use metric units "mm" or "cm" (by default if not specified). Or leave it empty and the thickness defined in the chosen experiment will be used.</small>
            </div>    
            <div class="form-group"> 
              <label class="form-group-label" for="thickness">
                Comment
              </label>
              <input id="comment" type="text" class="form-control form-control-lg" placeholder="this is a very beautiful crystal..." name="comment">
              <small>Write a short describtion or leave it empty</small>
            </div>   
            <div class="form-group" id="form-exp-files">
              <label>Filename parser settings</label>
              <small>Regular expressions for the fields</small>
              
              <?wsp Table[  

                With[{var = If[!StringQ[selectedExperiment], Last[experiments], experiments[selectedExperiment]]["parser"][[i]], uid = CreateUUID[]},  ?>
  
              <div class="row pb-3" id="<?wspuid?>">
                <div class="col">
                  <input type="text" class="form-control" placeholder="Field name" name="parser_field_<?wspi?>" value="<?wsp var[[1]] ?>">
                </div> 
                
                <div class="col-lg-3">
                  <input type="text" class="form-control" placeholder="Regexp" name="parser_regexp_<?wspi?>" value="<?wsp var[[2]] ?>">
                </div>
                <div class="col-lg-5">
                  <input type="text" class="form-control" placeholder="Epilog function" name="parser_function_<?wspi?>" value="<?wsp ToString[var[[3]],InputForm]//StringFix ?>">
                </div>

                <div class="col">
                  <button type="button" class="btn btn-outline-danger" onclick="document.getElementById('<?wspuid?>').remove()">-</button>
                </div>
                   
              </div> 
              
              
              
              
              <?wsp ] , {i, 1, If[!StringQ[selectedExperiment], Last[experiments], experiments[selectedExperiment]]["parser"]//Length}] ?>

           </div>  
           <div class="form-group" id="form-button-exp-files">
            <button type="button" class="btn btn-outline-info" onclick="addRowData('','','')">Add extra field</button>
           </div>                                       
           <div class="form-check">
            <input class="form-check-input" name = "manual" type="checkbox" onclick="hidetoggle_files(this)" id="hideshowfile" form="filesform" checked>
            <label class="form-check-label" for="manual">
              I don't like RegExp, will do it manually
            </label>
           </div>                 
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="$('#filesModal').modal('hide')">Close</button>
          <input type="submit" class="btn btn-primary btn-lg px-4 me-md-2 fw-bold" value="Submit" form="filesform">
        </div>
      </div>
    </div>
  </div>



<script>

function hidetoggle_files(ev) {

let div = document.querySelector("#form-exp-files");
let btn = document.querySelector("#form-button-exp-files");
console.log(ev.checked);
if (ev.checked) {
  div.style = "display: none";
  btn.style = "display: none";
  console.log("hide");
} else {
  div.style = "display: block";
  btn.style = "display: block";
  console.log("show");
}
};



  function fillFields(input) {
    var data = interpretate(input);
    console.log(data);
    document.getElementById('form-exp-files').innerHTML = "";

    data.forEach(function callback(val) {
      addRowData(val[0], val[1], val[2]);
    });

  };


  function addFolderData(id, name) {
    const div = document.createElement('option');


    div.innerHTML = name;

    div.value=id;

    document.getElementById('folder').appendChild(div);
  };  

  function addFolderDataEmpty() {
    const div = document.createElement('option');


    div.innerHTML = 'Workbook';

    div.value='Workbook';
    div.selected="selected";

    document.getElementById('folder').appendChild(div);
  };    


  

  function addRowData(field, regexp, func) {
    const div = document.createElement('div');
    const uid = "id" + Math.random().toString(16).slice(2);

    div.className = 'row pb-3';
    div.id = uid;

    div.innerHTML = `
                <div class="col">
                  <input type="text" value="${field}" class="form-control" placeholder="Field name" name="parser_field_${uid}" >
                </div> 
                
                <div class="col-lg-3">
                  <input type="text" value="${regexp}" class="form-control" placeholder="Regexp" name="parser_regexp_${uid}" >
                </div>
                <div class="col-lg-5">
                  <input type="text" value="${func}" class="form-control" placeholder="Epilog function" name="parser_function_${uid}" >
                </div>

                <div class="col">
                  <button type="button" class="btn btn-outline-danger" onclick="document.getElementById('${uid}').remove()">-</button>
                </div>
              
    `;

    document.getElementById('form-exp-files').appendChild(div);
  };  

  function fillFolders(input) {
    var data = interpretate(input);
    console.log(data);
    document.getElementById('folder').innerHTML = "";

    addFolderDataEmpty();
    data.forEach(function callback(val) {
      addFolderData(val[0], val[1]);
    });  

  }

  function getExp(selectObject) {
    var value = selectObject.value;  
    console.log(value);
    
    WSPHttpQuery('Map[Function[x, {x[[1]], x[[2]], ToString[x[[3]],InputForm]//StringFix} ], experiments["' + value + '"]["parser"]]',fillFields, 'ExpressionJSON');
    WSPHttpQuery('Function[x,{x,folders[x,"name"]}]/@(experiments["'+ value +'", "folders"]//Keys)',fillFolders, 'ExpressionJSON');
  };

  function loadState(s) {
    var input = s;
    if (typeof s === "string") {
      input = JSON.parse(atob(s));
    };

    console.log(input);

    input.forEach(function(el) {
        if(el.type !== "checkbox") {
          document.getElementById(el.id).value = el.value;
        } else {
          document.getElementById(el.id).checked = el.value;
        }
        
    });
  }

  function ripState() {
    const inputs = document.getElementById("filesform").elements;
    var preset = [];
    // Iterate over the form controls
    for (let i = 0; i < inputs.length; i++) {
      if (inputs[i].nodeName === "INPUT" && inputs[i].id.includes("$service")) {
        // Update text input
        if(inputs[i].type !== "checkbox") {
            preset.push({id: inputs[i].id, value: inputs[i].value, type: "ok"});
        } else {
            preset.push({id: inputs[i].id, value: inputs[i].checked, type: "checkbox"});
        }
        
      }
    }

    console.log(preset);

    return(preset);
  }

  function removePreset() {
    var e = document.getElementById("presetlist");
    
    var value = e.options[e.selectedIndex].text;  

    if(value == "expert") {
      loadState(copyPreset);
    } else {
      WSPHttpQuery('settings["presets", "' + value + '"]=.; "ok"', function(el) {
        var pt = document.getElementById("presetlist").children;

        for (let i=0; i < pt.length; i++) {
          pt[i].selected = "";
          if (pt[i].value === value) {
            pt[i].remove();
            break;
          }
        };


        loadState(copyPreset);


      }, 'String');
    }    
  }

  function getPreset(selectObject) {
    var value = selectObject.value;  
    console.log(value);

    if(value == "expert") {
      loadState(copyPreset);
    } else {
      WSPHttpQuery('settings["presets", "' + value + '"]', loadState, 'String');
    }
  };  


  function savePreset(input) {
    var bb = ripState();
    bb = btoa(JSON.stringify(bb));

    console.log(bb);

    if(input.length === 0) {
      alert("Name is empty");
    } else {
      WSPHttpBigQuery('settings[\"presets\", \"' + input + '\"] = \"'+bb+'\";', function(el) {
        var pt = document.getElementById("presetlist").children;

        for (let i=0; i < pt.length; i++) {
          pt[i].selected = "";
        }

        const div = document.createElement('option');
        
        div.value = input;
        div.innerHTML = input;
        div.selected = "selected";

        document.getElementById("presetlist").appendChild(div);
        pt = document.getElementById("presetlist").children;

        

      }
      
      , 'String');

    }  
  }  

  var cmtag = CodeMirror.fromTextArea(document.getElementById("customtag"), {
    lineNumbers: false,
    autoCloseTags: true,

    mode:  "mathematica",
    indentWithTabs: true,
    theme: "default",   
    lineWrapping: true     
 });

 hidetoggle_files(document.getElementById("hideshowfile"));

 var copyPreset = ripState();

 
 </script>